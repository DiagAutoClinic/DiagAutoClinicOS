#!/usr/bin/env python3
"""
Modern Techy Style Manager for AutoECU
Provides dark/light mode and modern styling
"""

from PyQt6.QtCore import Qt, QSettings
from PyQt6.QtGui import QFont, QPalette, QColor
from PyQt6.QtWidgets import QApplication, QStyleFactory

class StyleManager:
    def __init__(self):
        self.settings = QSettings("AutoECU", "Style")
        self.current_theme = self.settings.value("theme", "dark")
        self.font_family = self.settings.value("font_family", "Segoe UI")
        self.font_size = int(self.settings.value("font_size", "9"))
        
    def set_theme(self, theme_name):
        """Set the application theme with error handling"""
        if theme_name not in self.get_theme_names():
            raise ValueError(f"Unknown theme: {theme_name}. Available themes: {self.get_theme_names()}")
        
        self.current_theme = theme_name
        self.settings.setValue("theme", theme_name)
        
        theme_methods = {
            "dark": self.apply_dark_theme,
            "light": self.apply_light_theme,
            "tech_blue": self.apply_tech_blue_theme,
            "professional": self.apply_professional_theme
        }
        
        try:
            theme_methods[theme_name]()
        except Exception as e:
            print(f"Error applying theme {theme_name}: {e}")
            self.apply_dark_theme()
            
    def set_font(self, font_family=None, font_size=None):
        """Set application font"""
        if font_family:
            self.font_family = font_family
            self.settings.setValue("font_family", font_family)
        if font_size:
            self.font_size = font_size
            self.settings.setValue("font_size", str(font_size))
        
        self.set_theme(self.current_theme)
        
    def apply_dark_theme(self):
        """Apply modern dark theme for ECU programming"""
        app = QApplication.instance()
        app.setStyle(QStyleFactory.create("Fusion"))
        
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor(15, 20, 25))
        palette.setColor(QPalette.ColorRole.WindowText, QColor(240, 240, 240))
        palette.setColor(QPalette.ColorRole.Base, QColor(25, 30, 35))
        palette.setColor(QPalette.ColorRole.AlternateBase, QColor(35, 40, 45))
        palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(40, 45, 50))
        palette.setColor(QPalette.ColorRole.ToolTipText, Qt.GlobalColor.white)
        palette.setColor(QPalette.ColorRole.Text, QColor(240, 240, 240))
        palette.setColor(QPalette.ColorRole.Button, QColor(40, 45, 50))
        palette.setColor(QPalette.ColorRole.ButtonText, QColor(240, 240, 240))
        palette.setColor(QPalette.ColorRole.BrightText, Qt.GlobalColor.red)
        palette.setColor(QPalette.ColorRole.Link, QColor(0, 150, 255))
        palette.setColor(QPalette.ColorRole.Highlight, QColor(0, 120, 215))
        palette.setColor(QPalette.ColorRole.HighlightedText, Qt.GlobalColor.white)
        
        app.setPalette(palette)
        app.setStyleSheet(self.get_dark_stylesheet())
        
    def apply_light_theme(self):
        """Apply modern light theme"""
        app = QApplication.instance()
        app.setStyle(QStyleFactory.create("Fusion"))
        
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor(245, 245, 245))
        palette.setColor(QPalette.ColorRole.WindowText, QColor(30, 30, 30))
        palette.setColor(QPalette.ColorRole.Base, QColor(255, 255, 255))
        palette.setColor(QPalette.ColorRole.AlternateBase, QColor(240, 240, 240))
        palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(255, 255, 255))
        palette.setColor(QPalette.ColorRole.ToolTipText, QColor(30, 30, 30))
        palette.setColor(QPalette.ColorRole.Text, QColor(30, 30, 30))
        palette.setColor(QPalette.ColorRole.Button, QColor(240, 240, 240))
        palette.setColor(QPalette.ColorRole.ButtonText, QColor(30, 30, 30))
        palette.setColor(QPalette.ColorRole.BrightText, Qt.GlobalColor.red)
        palette.setColor(QPalette.ColorRole.Link, QColor(0, 100, 200))
        palette.setColor(QPalette.ColorRole.Highlight, QColor(0, 120, 215))
        palette.setColor(QPalette.ColorRole.HighlightedText, Qt.GlobalColor.white)
        
        app.setPalette(palette)
        app.setStyleSheet(self.get_light_stylesheet())
        
    def apply_tech_blue_theme(self):
        """Apply tech blue theme for ECU interface"""
        app = QApplication.instance()
        app.setStyle(QStyleFactory.create("Fusion"))
        
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor(10, 15, 25))
        palette.setColor(QPalette.ColorRole.WindowText, QColor(220, 240, 255))
        palette.setColor(QPalette.ColorRole.Base, QColor(20, 25, 35))
        palette.setColor(QPalette.ColorRole.AlternateBase, QColor(30, 35, 45))
        palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(40, 45, 55))
        palette.setColor(QPalette.ColorRole.ToolTipText, QColor(220, 240, 255))
        palette.setColor(QPalette.ColorRole.Text, QColor(220, 240, 255))
        palette.setColor(QPalette.ColorRole.Button, QColor(40, 80, 120))
        palette.setColor(QPalette.ColorRole.ButtonText, QColor(220, 240, 255))
        palette.setColor(QPalette.ColorRole.BrightText, Qt.GlobalColor.cyan)
        palette.setColor(QPalette.ColorRole.Link, QColor(0, 180, 255))
        palette.setColor(QPalette.ColorRole.Highlight, QColor(0, 150, 255))
        palette.setColor(QPalette.ColorRole.HighlightedText, Qt.GlobalColor.white)
        
        app.setPalette(palette)
        app.setStyleSheet(self.get_tech_blue_stylesheet())
        
    def apply_professional_theme(self):
        """Apply professional theme for automotive tools"""
        app = QApplication.instance()
        app.setStyle(QStyleFactory.create("Fusion"))
        
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor(45, 45, 48))
        palette.setColor(QPalette.ColorRole.WindowText, QColor(241, 241, 241))
        palette.setColor(QPalette.ColorRole.Base, QColor(37, 37, 38))
        palette.setColor(QPalette.ColorRole.AlternateBase, QColor(45, 45, 48))
        palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(63, 63, 70))
        palette.setColor(QPalette.ColorRole.ToolTipText, QColor(241, 241, 241))
        palette.setColor(QPalette.ColorRole.Text, QColor(241, 241, 241))
        palette.setColor(QPalette.ColorRole.Button, QColor(63, 63, 70))
        palette.setColor(QPalette.ColorRole.ButtonText, QColor(241, 241, 241))
        palette.setColor(QPalette.ColorRole.BrightText, Qt.GlobalColor.red)
        palette.setColor(QPalette.ColorRole.Link, QColor(0, 151, 251))
        palette.setColor(QPalette.ColorRole.Highlight, QColor(0, 151, 251))
        palette.setColor(QPalette.ColorRole.HighlightedText, Qt.GlobalColor.white)
        
        app.setPalette(palette)
        app.setStyleSheet(self.get_professional_stylesheet())

    def _get_base_stylesheet(self):
        """Common styles shared across themes"""
        return f"""
            QWidget {{
                font-family: '{self.font_family}';
                font-size: {self.font_size}pt;
            }}
            
            QToolTip {{
                padding: 5px;
                border: 1px solid;
                opacity: 240;
            }}
        """

    def get_dark_stylesheet(self):
        """Return dark theme stylesheet for AutoECU"""
        base_styles = self._get_base_stylesheet()
        return base_styles + """
            /* AutoECU Dark Theme */
            QMainWindow, QDialog {
                background-color: #0f1419;
                color: #f0f0f0;
            }
            
            /* ECU Specific Styling */
            QFrame[class="ecu_frame"] {
                background-color: #1a1f24;
                border: 2px solid #2a4a6a;
                border-radius: 8px;
                padding: 15px;
            }
            
            QFrame[class="ecu_frame"]:hover {
                border-color: #0078d4;
                background-color: #1e2328;
            }
            
            QLabel[class="ecu_status"] {
                font-weight: bold;
                padding: 8px;
                border-radius: 4px;
            }
            
            QLabel[class="ecu_status_connected"] {
                background-color: #107c10;
                color: white;
            }
            
            QLabel[class="ecu_status_disconnected"] {
                background-color: #d13438;
                color: white;
            }
            
            QLabel[class="ecu_status_reading"] {
                background-color: #0078d4;
                color: white;
            }
            
            QLabel[class="ecu_status_writing"] {
                background-color: #ff8c00;
                color: white;
            }
            
            /* Programming Buttons */
            QPushButton[class="program_button"] {
                background-color: #0078d4;
                color: white;
                border: 2px solid #106ebe;
                border-radius: 6px;
                padding: 10px 20px;
                font-weight: bold;
                font-size: 10pt;
                min-width: 120px;
            }
            
            QPushButton[class="program_button"]:hover {
                background-color: #106ebe;
            }
            
            QPushButton[class="program_button"]:pressed {
                background-color: #005a9e;
            }
            
            QPushButton[class="read_button"] {
                background-color: #107c10;
                color: white;
                border: 2px solid #0e6b0e;
            }
            
            QPushButton[class="write_button"] {
                background-color: #d13438;
                color: white;
                border: 2px solid #b02a30;
            }
            
            /* Data Tables */
            QTableWidget[class="ecu_data_table"] {
                background-color: #1a1f24;
                color: #f0f0f0;
                gridline-color: #2a2f34;
                border: 1px solid #2a2f34;
                border-radius: 6px;
                alternate-background-color: #252a30;
            }
            
            QTableWidget[class="ecu_data_table"]::item {
                padding: 8px;
                border-bottom: 1px solid #2a2f34;
            }
            
            QTableWidget[class="ecu_data_table"]::item:selected {
                background-color: #0078d4;
                color: white;
            }
            
            /* Parameter Editor */
            QLineEdit[class="parameter_edit"] {
                background-color: #1a1f24;
                color: #f0f0f0;
                border: 2px solid #2a2f34;
                border-radius: 4px;
                padding: 8px;
                font-family: 'Consolas', 'Monaco', monospace;
            }
            
            QLineEdit[class="parameter_edit"]:focus {
                border-color: #0078d4;
                background-color: #1e2328;
            }
            
            /* Progress bars for ECU operations */
            QProgressBar[class="ecu_progress"] {
                border: 2px solid #2a2f34;
                border-radius: 6px;
                background-color: #1a1f24;
                text-align: center;
                color: #f0f0f0;
                height: 20px;
            }
            
            QProgressBar[class="ecu_progress"]::chunk {
                background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #0078d4, stop:1 #00a8ff);
                border-radius: 4px;
            }
            
            /* Hex Viewer */
            QTextEdit[class="hex_viewer"] {
                background-color: #1a1f24;
                color: #00ff00;
                border: 1px solid #2a2f34;
                border-radius: 4px;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 9pt;
            }
        """

    def get_light_stylesheet(self):
        """Return light theme stylesheet"""
        base_styles = self._get_base_stylesheet()
        return base_styles + """
            /* AutoECU Light Theme */
            QMainWindow, QDialog {
                background-color: #f5f5f5;
                color: #333333;
            }
            
            QFrame[class="ecu_frame"] {
                background-color: #ffffff;
                border: 2px solid #cccccc;
                border-radius: 8px;
                padding: 15px;
            }
            
            /* ... include similar light theme adaptations ... */
        """
    
    def get_tech_blue_stylesheet(self):
        """Return tech blue theme stylesheet"""
        base_styles = self._get_base_stylesheet()
        return base_styles + """
            /* AutoECU Tech Blue Theme */
            QMainWindow, QDialog {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                    stop: 0 #0a1929, stop: 1 #1a2938);
                color: #dcf0ff;
            }
            
            QFrame[class="ecu_frame"] {
                background-color: rgba(30, 40, 60, 0.8);
                border: 2px solid #2a4a6a;
                border-radius: 8px;
                padding: 15px;
            }
            
            QPushButton[class="program_button"] {
                background-color: #00a8ff;
                color: #0a1929;
                border: 2px solid #0090e0;
                border-radius: 6px;
                padding: 10px 20px;
                font-weight: bold;
            }
        """
    
    def get_professional_stylesheet(self):
        """Return professional theme stylesheet"""
        base_styles = self._get_base_stylesheet()
        return base_styles + """
            /* AutoECU Professional Theme */
            QMainWindow, QDialog {
                background-color: #2d2d30;
                color: #f0f0f0;
            }
            
            QFrame[class="ecu_frame"] {
                background-color: #3c3c3c;
                border: 1px solid #555555;
                border-radius: 4px;
                padding: 12px;
            }
        """

    def get_theme_names(self):
        """Return available theme names"""
        return ["dark", "light", "tech_blue", "professional"]
    
    def get_theme_info(self):
        """Return theme metadata for UI display"""
        return {
            "dark": {
                "name": "Dark Mode", 
                "description": "Modern dark theme for ECU programming",
                "preview_color": "#0f1419"
            },
            "light": {
                "name": "Light Mode", 
                "description": "Clean light theme for bright environments",
                "preview_color": "#f5f5f5"
            },
            "tech_blue": {
                "name": "Tech Blue", 
                "description": "Professional blue theme for automotive tools",
                "preview_color": "#0a1929"
            },
            "professional": {
                "name": "Professional", 
                "description": "VS Code inspired professional theme",
                "preview_color": "#2d2d30"
            }
        }

	/* Brand-specific styling */
	QFrame[class="diagnostic_frame"] {
	    background-color: #1a1f24;
	    border: 1px solid #2a2f34;
	    border-radius: 6px;
	    padding: 12px;
	    margin: 5px;
	}

	QFrame[class="diagnostic_frame"]:hover {
	    border-color: #0078d4;
	    background-color: #1e2328;
	}

	QTextEdit[class="procedure_viewer"] {
	    background-color: #1a1f24;
	    color: #f0f0f0;
	    border: 1px solid #2a2f34;
	    border-radius: 4px;
	    font-family: 'Consolas', monospace;
	    font-size: 9pt;
	}