#!/usr/bin/env python3
"""
AutoKey - Automotive Key Programming Tool
Modern interface with theme support
"""

import sys
import os
from PyQt6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                            QWidget, QPushButton, QLabel, QComboBox, QTabWidget,
                            QGroupBox, QTableWidget, QTableWidgetItem, QProgressBar,
                            QTextEdit, QLineEdit, QHeaderView, QRadioButton)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QFont

# Import the style manager
from style_manager import StyleManager
from brand_database import get_brand_info, get_brand_list

class AutoKeyApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.style_manager = StyleManager()
        self.selected_brand = "Toyota"
        self.init_ui()
        
    def init_ui(self):
        """Initialize the user interface"""
        self.setWindowTitle("AutoKey - Key Programming Tool")
        self.setGeometry(100, 100, 1000, 700)
        
        # Create central widget and main layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        
        # Create header
        self.create_header(main_layout)
        
        # Create main tab widget
        self.tab_widget = QTabWidget()
        main_layout.addWidget(self.tab_widget)
        
        # Create tabs
        self.create_key_programming_tab()
        self.create_transponder_tab()
        self.create_vehicle_info_tab()
        
        # Create status bar
        self.create_status_bar()
        
        # Apply theme AFTER UI is created
        self.style_manager.set_theme("dark")
        
        # Show the window
        self.show()
        
    def create_header(self, layout):
        """Create application header with theme selector"""
        header_widget = QWidget()
        header_layout = QHBoxLayout(header_widget)
        
        # Title
        title_label = QLabel("AutoKey - Professional Key Programming")
        title_label.setProperty("class", "title")
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        title_label.setFont(title_font)
        
        # Theme selector
        theme_layout = QHBoxLayout()
        theme_label = QLabel("Theme:")
        self.theme_combo = QComboBox()
        
        theme_info = self.style_manager.get_theme_info()
        for theme_id, info in theme_info.items():
            self.theme_combo.addItem(info['name'], theme_id)
        
        self.theme_combo.currentTextChanged.connect(self.on_theme_changed)
        
        theme_layout.addWidget(theme_label)
        theme_layout.addWidget(self.theme_combo)
        theme_layout.addStretch()
        
        header_layout.addWidget(title_label)
        header_layout.addLayout(theme_layout)
        
        layout.addWidget(header_widget)

    self.create_brand_selector()

    def create_brand_selector(self):
        """Brand selector for key systems"""
        brand_layout = QHBoxLayout()
        brand_label = QLabel("Vehicle Brand:")
        self.brand_combo = QComboBox()
        
        brands = get_brand_list()
        self.brand_combo.addItems(brands)
        self.brand_combo.setCurrentText(self.selected_brand)
        self.brand_combo.currentTextChanged.connect(self.on_key_brand_changed)
        
        brand_layout.addWidget(brand_label)
        brand_layout.addWidget(self.brand_combo)
        
        self.header_layout.addLayout(brand_layout)

    def on_key_brand_changed(self, brand_name):
        """Handle key brand change"""
        self.selected_brand = brand_name
        brand_info = get_brand_info(brand_name)

    def update_key_systems(self, brand_info):
        """Update key systems based on brand"""
        key_systems = brand_info.get('key_systems', [])
        pin_codes = brand_info.get('pin_codes', [])
        
        # Update UI with brand-specific key information
        if hasattr(self, 'key_system_label'):
            self.key_system_label.setText(f"Key System: {', '.join(key_systems)}")
        
        if hasattr(self, 'pin_method_label'):
            self.pin_method_label.setText(f"PIN Methods: {', '.join(pin_codes)}")
        
    def create_key_programming_tab(self):
        """Create key programming tab"""
        key_tab = QWidget()
        layout = QVBoxLayout(key_tab)

        # Update key programming options
        self.update_key_systems(brand_info)
        self.update_security_procedures(brand_info)
        
        # Vehicle information
        vehicle_frame = QWidget()
        vehicle_frame.setProperty("class", "vehicle_info")
        vehicle_layout = QVBoxLayout(vehicle_frame)
        
        make_label = QLabel("Toyota Camry 2020")
        make_label.setProperty("class", "vehicle_make")
        
        model_label = QLabel("2.5L Hybrid - Smart Key System")
        model_label.setProperty("class", "vehicle_model")
        
        vehicle_layout.addWidget(make_label)
        vehicle_layout.addWidget(model_label)
        
        # Key programming controls
        key_group = QGroupBox("Key Programming")
        key_group.setProperty("class", "key_frame")
        key_layout = QVBoxLayout(key_group)
        
        # Security code input
        security_layout = QHBoxLayout()
        security_label = QLabel("Security Code:")
        self.security_input = QLineEdit()
        self.security_input.setProperty("class", "security_code")
        self.security_input.setPlaceholderText("Enter vehicle security code")
        self.security_input.setMaxLength(8)
        
        security_layout.addWidget(security_label)
        security_layout.addWidget(self.security_input)
        security_layout.addStretch()
        
        # Programming buttons
        btn_layout = QHBoxLayout()
        
        program_btn = QPushButton("Program New Key")
        program_btn.setProperty("class", "key_button program_key_button")
        program_btn.clicked.connect(self.program_key)
        
        clone_btn = QPushButton("Clone Key")
        clone_btn.setProperty("class", "key_button clone_key_button")
        clone_btn.clicked.connect(self.clone_key)
        
        reset_btn = QPushButton("Reset System")
        reset_btn.setProperty("class", "key_button reset_key_button")
        reset_btn.clicked.connect(self.reset_system)
        
        btn_layout.addWidget(program_btn)
        btn_layout.addWidget(clone_btn)
        btn_layout.addWidget(reset_btn)
        btn_layout.addStretch()
        
        # Key status
        status_layout = QHBoxLayout()
        self.key_status = QLabel("No Key Detected")
        self.key_status.setProperty("class", "key_status_unprogrammed")
        
        self.immobilizer_status = QLabel("Immobilizer: Active")
        self.immobilizer_status.setProperty("class", "immobilizer_active")
        
        status_layout.addWidget(QLabel("Key Status:"))
        status_layout.addWidget(self.key_status)
        status_layout.addWidget(self.immobilizer_status)
        status_layout.addStretch()
        
        key_layout.addLayout(security_layout)
        key_layout.addLayout(btn_layout)
        key_layout.addLayout(status_layout)
        
        layout.addWidget(vehicle_frame)
        layout.addWidget(key_group)
        layout.addStretch()
        
        self.tab_widget.addTab(key_tab, "Key Programming")
        
    def create_transponder_tab(self):
        """Create transponder management tab"""
        transponder_tab = QWidget()
        layout = QVBoxLayout(transponder_tab)
        
        # Transponder group
        transponder_group = QGroupBox("Transponder Management")
        transponder_group.setProperty("class", "transponder_group")
        transponder_layout = QVBoxLayout(transponder_group)
        
        # Transponder table
        self.transponder_table = QTableWidget()
        self.transponder_table.setProperty("class", "key_data_table")
        self.transponder_table.setColumnCount(4)
        self.transponder_table.setHorizontalHeaderLabels(["Key ID", "Type", "Status", "Vehicle"])
        self.transponder_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        
        # Add sample data
        self.add_sample_transponder_data()
        
        transponder_layout.addWidget(self.transponder_table)
        
        layout.addWidget(transponder_group)
        layout.addStretch()
        
        self.tab_widget.addTab(transponder_tab, "Transponders")
        
    def create_vehicle_info_tab(self):
        """Create vehicle information tab"""
        vehicle_tab = QWidget()
        layout = QVBoxLayout(vehicle_tab)
        
        vehicle_group = QGroupBox("Vehicle Information")
        vehicle_group.setProperty("class", "key_frame")
        vehicle_layout = QVBoxLayout(vehicle_group)
        
        # Vehicle details table
        details_table = QTableWidget()
        details_table.setProperty("class", "key_data_table")
        details_table.setColumnCount(2)
        details_table.setHorizontalHeaderLabels(["Property", "Value"])
        details_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        
        # Add vehicle data
        vehicle_data = [
            ["VIN", "JTNKU56E9A1234567"],
            ["Make", "Toyota"],
            ["Model", "Camry"],
            ["Year", "2020"],
            ["Key System", "Smart Key"],
            ["Transponder", "ID4C / 4D"],
            ["Keys Programmed", "2/5"]
        ]
        
        details_table.setRowCount(len(vehicle_data))
        for row, data in enumerate(vehicle_data):
            for col, value in enumerate(data):
                details_table.setItem(row, col, QTableWidgetItem(value))
        
        vehicle_layout.addWidget(details_table)
        
        layout.addWidget(vehicle_group)
        layout.addStretch()
        
        self.tab_widget.addTab(vehicle_tab, "Vehicle Info")

    def create_key_systems_tab(self):
        """Create brand-specific key systems tab"""
        systems_tab = QWidget()
        layout = QVBoxLayout(systems_tab)
        
        # Key system info
        system_frame = QFrame()
        system_frame.setProperty("class", "key_frame")
        system_layout = QVBoxLayout(system_frame)
        
        system_label = QLabel("Brand Key Systems")
        system_label.setProperty("class", "subtitle")
        
        self.system_info_text = QTextEdit()
        self.system_info_text.setProperty("class", "hex_viewer")
        
        system_layout.addWidget(system_label)
        system_layout.addWidget(self.system_info_text)

        # Security procedures
        security_frame = QFrame()
        security_frame.setProperty("class", "key_frame")
        security_layout = QVBoxLayout(security_frame)
        
        security_label = QLabel("Security Procedures")
        security_label.setProperty("class", "subtitle")
        
        self.security_procedures = QTextEdit()
        self.security_procedures.setProperty("class", "hex_viewer")

        procedures = self.get_brand_security_procedures(self.selected_brand)
        self.security_procedures.setText(procedures)
    
    def get_brand_security_procedures(self, brand):
        """Get security procedures for each brand"""
        procedures = {
            "Toyota": """Toyota Smart Key Programming:
1. Enter security code via OBD
2. Insert master key and turn ignition ON
3. Press brake pedal within 15 seconds
4. Press LOCK/UNLOCK buttons sequentially
5. Wait for immobilizer light to blink""",
            
            "Volkswagen": """VW Immobilizer Programming:
1. Connect with VCDS/ODIS
2. Access Immobilizer (25)
3. Login with SKC code
4. Adapt keys via channel 21
5. Test all programmed keys""",

            "BMW": """BMW CAS/FRM Programming:
1. Connect with ISTA/P
2. Read ISN from CAS module
3. Program key via diagnosis
4. Synchronize with FEM/BDC
5. Test comfort access functions"""
        }
        
        return procedures.get(brand, "Standard OBD key programming procedure")
        
        security_layout.addWidget(security_label)
        security_layout.addWidget(self.security_procedures)
        
        layout.addWidget(system_frame)
        layout.addWidget(security_frame)
        
        self.tab_widget.addTab(systems_tab, "Key Systems")

    def update_key_system_info(self):
        """Update key system information for selected brand"""
        brand_info = get_brand_info(self.selected_brand)
        
        info_text = f"""
Brand: {self.selected_brand}
Region: {brand_info.get('region', 'N/A')}
Key Systems: {', '.join(brand_info.get('key_systems', []))}
PIN Methods: {', '.join(brand_info.get('pin_codes', []))}
Common ECUs: {', '.join(brand_info.get('common_ecus', []))}

Supported Protocols:
{chr(10).join(['• ' + proto for proto in brand_info.get('diagnostic_protocols', [])])}
        """
        
        self.system_info_text.setText(info_text.strip())


        
    def create_status_bar(self):
        """Create status bar"""
        self.status_label = QLabel("Ready to program keys")
        self.statusBar().addWidget(self.status_label)
        
    def on_theme_changed(self, theme_name):
        """Handle theme change"""
        theme_info = self.style_manager.get_theme_info()
        for theme_id, info in theme_info.items():
            if info['name'] == theme_name:
                self.style_manager.set_theme(theme_id)
                break
                
    def add_sample_transponder_data(self):
        """Add sample transponder data"""
        sample_data = [
            ["KEY001", "Smart Key", "Programmed", "Toyota Camry"],
            ["KEY002", "Smart Key", "Programmed", "Toyota Camry"],
            ["KEY003", "Mechanical", "Unprogrammed", "N/A"],
            ["TSP001", "ID4C", "Blank", "N/A"]
        ]
        
        self.transponder_table.setRowCount(len(sample_data))
        for row, data in enumerate(sample_data):
            for col, value in enumerate(data):
                self.transponder_table.setItem(row, col, QTableWidgetItem(value))
                
    def program_key(self):
        """Simulate key programming"""
        if not self.security_input.text():
            self.status_label.setText("Please enter security code first")
            return
            
        self.status_label.setText("Programming new key...")
        self.key_status.setText("Programming...")
        self.key_status.setProperty("class", "key_status_learning")
        
        # Simulate programming process
        QTimer.singleShot(3000, self.programming_complete)
        
    def programming_complete(self):
        """Called when programming completes"""
        self.status_label.setText("Key programmed successfully!")
        self.key_status.setText("Programmed")
        self.key_status.setProperty("class", "key_status_programmed")
        
    def clone_key(self):
        """Simulate key cloning"""
        self.status_label.setText("Cloning key...")
        
    def reset_system(self):
        """Simulate system reset"""
        self.status_label.setText("Resetting key system...")
        self.security_input.clear()
        self.key_status.setText("No Key Detected")
        self.key_status.setProperty("class", "key_status_unprogrammed")

def main():
    app = QApplication(sys.argv)
    
    # Set application properties
    app.setApplicationName("AutoKey")
    app.setApplicationVersion("1.0.0")
    app.setOrganizationName("DiagAutoClinicOS")
    
    window = AutoKeyApp()        # Update security procedures
        procedures = self.get_brand_security_procedures(self.selected_brand)
        self.security_procedures.setText(procedures)
    
    def get_brand_security_procedures(self, brand):
        """Get security procedures for each brand"""
        procedures = {
            "Toyota": """Toyota Smart Key Programming:
1. Enter security code via OBD
2. Insert master key and turn ignition ON
3. Press brake pedal within 15 seconds
4. Press LOCK/UNLOCK buttons sequentially
5. Wait for immobilizer light to blink""",
            
            "Volkswagen": """VW Immobilizer Programming:
1. Connect with VCDS/ODIS
2. Access Immobilizer (25)
3. Login with SKC code
4. Adapt keys via channel 21
5. Test all programmed keys""",
    sys.exit(app.exec())

if __name__ == "__main__":
    main()