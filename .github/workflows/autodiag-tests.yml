name: AutoDiag v2 Beta - Test Suite

# Trigger on push, pull request, or manual dispatch
on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'AutoDiag/**'
      - 'shared/**'
      - 'tests/**'
      - '.github/workflows/autodiag-tests.yml'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

# Cancel in-progress runs when new commit pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # JOB 1: UNIT TESTS
  # ============================================================================
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb-xinerama0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-shape0 \
            libxkbcommon-x11-0 \
            libdbus-1-3 \
            xvfb
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run unit tests (Linux)
        if: runner.os == 'Linux'
        run: |
          xvfb-run -a pytest tests/ -m unit -v --tb=short --cov=AutoDiag --cov=shared --cov-report=xml --cov-report=term
      
      - name: Run unit tests (Windows/Mac)
        if: runner.os != 'Linux'
        run: |
          pytest tests/ -m unit -v --tb=short --cov=AutoDiag --cov=shared --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unit-tests,${{ matrix.os }},python-${{ matrix.python-version }}
          name: unit-${{ matrix.os }}-py${{ matrix.python-version }}

  # ============================================================================
  # JOB 2: INTEGRATION TESTS
  # ============================================================================
  integration-tests:
    name: Integration Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libxcb-xinerama0 libdbus-1-3
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run integration tests
        run: |
          xvfb-run -a pytest tests/ -m integration -v --tb=short --cov=AutoDiag --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: integration-tests

  # ============================================================================
  # JOB 3: CODE QUALITY CHECKS
  # ============================================================================
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
      
      - name: Run Black (code formatting check)
        run: |
          black --check AutoDiag/ shared/ tests/
      
      - name: Run isort (import sorting check)
        run: |
          isort --check-only AutoDiag/ shared/ tests/
      
      - name: Run Flake8 (style guide)
        run: |
          flake8 AutoDiag/ shared/ tests/ --max-line-length=100 --extend-ignore=E203,W503
      
      - name: Run Pylint (code analysis)
        continue-on-error: true
        run: |
          pylint AutoDiag/ shared/ --disable=C,R --max-line-length=100
      
      - name: Run MyPy (type checking)
        continue-on-error: true
        run: |
          mypy AutoDiag/ shared/ --ignore-missing-imports

  # ============================================================================
  # JOB 4: SECURITY SCAN
  # ============================================================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install safety bandit pip-audit
      
      - name: Run Safety (dependency vulnerabilities)
        continue-on-error: true
        run: |
          safety check --json
      
      - name: Run Bandit (security linting)
        continue-on-error: true
        run: |
          bandit -r AutoDiag/ shared/ -f json -o bandit-report.json
      
      - name: Run pip-audit
        continue-on-error: true
        run: |
          pip-audit
      
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  # ============================================================================
  # JOB 5: TEST COVERAGE REPORT
  # ============================================================================
  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libxcb-xinerama0
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run all tests with coverage
        run: |
          xvfb-run -a pytest tests/ -v --cov=AutoDiag --cov=shared --cov-report=html --cov-report=xml --cov-report=term
      
      - name: Generate coverage badge
        run: |
          pip install coverage-badge
          coverage-badge -o coverage.svg -f
      
      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: htmlcov/
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: full-suite

  # ============================================================================
  # JOB 6: MOCK HARDWARE TESTS
  # ============================================================================
  mock-hardware-tests:
    name: Mock Hardware Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run mock hardware tests
        run: |
          xvfb-run -a pytest tests/ -m "mock and hardware" -v --tb=short
      
      - name: Test device detection
        run: |
          xvfb-run -a pytest tests/ -k "test_detect" -v

  # ============================================================================
  # JOB 7: PERFORMANCE TESTS
  # ============================================================================
  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          pip install -r requirements.txt
          pip install pytest-benchmark
      
      - name: Run performance tests
        run: |
          xvfb-run -a pytest tests/ -m "not slow" --benchmark-only --benchmark-json=benchmark.json
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmarks
          path: benchmark.json

  # ============================================================================
  # JOB 8: BUILD STATUS SUMMARY
  # ============================================================================
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, code-quality, security-scan, coverage-report]
    if: always()
    
    steps:
      - name: Check build status
        run: |
          echo "==================================="
          echo "AutoDiag v2 Beta - Build Summary"
          echo "==================================="
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Coverage Report: ${{ needs.coverage-report.result }}"
          echo "==================================="
      
      - name: Fail if critical tests failed
        if: |
          needs.unit-tests.result == 'failure' ||
          needs.integration-tests.result == 'failure'
        run: exit 1
